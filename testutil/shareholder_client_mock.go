// Code generated by MockGen. DO NOT EDIT.
// Source: /home/employee/go/pkg/mod/github.com/rddl-network/shamir-shareholder-service/client@v0.0.1/client.go

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	service "github.com/rddl-network/shamir-shareholder-service/service"
)

// MockIShamirShareholderClient is a mock of IShamirShareholderClient interface.
type MockIShamirShareholderClient struct {
	ctrl     *gomock.Controller
	recorder *MockIShamirShareholderClientMockRecorder
}

// MockIShamirShareholderClientMockRecorder is the mock recorder for MockIShamirShareholderClient.
type MockIShamirShareholderClientMockRecorder struct {
	mock *MockIShamirShareholderClient
}

// NewMockIShamirShareholderClient creates a new mock instance.
func NewMockIShamirShareholderClient(ctrl *gomock.Controller) *MockIShamirShareholderClient {
	mock := &MockIShamirShareholderClient{ctrl: ctrl}
	mock.recorder = &MockIShamirShareholderClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIShamirShareholderClient) EXPECT() *MockIShamirShareholderClientMockRecorder {
	return m.recorder
}

// GetMnemonic mocks base method.
func (m *MockIShamirShareholderClient) GetMnemonic(ctx context.Context) (service.MnemonicBody, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMnemonic", ctx)
	ret0, _ := ret[0].(service.MnemonicBody)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMnemonic indicates an expected call of GetMnemonic.
func (mr *MockIShamirShareholderClientMockRecorder) GetMnemonic(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMnemonic", reflect.TypeOf((*MockIShamirShareholderClient)(nil).GetMnemonic), ctx)
}

// PostMnemonic mocks base method.
func (m *MockIShamirShareholderClient) PostMnemonic(ctx context.Context, mnemonic string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostMnemonic", ctx, mnemonic)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostMnemonic indicates an expected call of PostMnemonic.
func (mr *MockIShamirShareholderClientMockRecorder) PostMnemonic(ctx, mnemonic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMnemonic", reflect.TypeOf((*MockIShamirShareholderClient)(nil).PostMnemonic), ctx, mnemonic)
}
